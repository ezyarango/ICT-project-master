import pygame 
import math
import random
import time
import sys

# Variables library:
score = 0
scroll = 0
y_change = 0
gravity = 1
obstacles = (300, 450, 600, 750)
obstacle_speed = 2
active = True
player_x = 170  # Keeping x position constant
player_y = 400  # Starting y position for walking
active_frame = 0
mode = 0
count = 0

pygame.init()

clock = pygame.time.Clock()
FPS = 40

screen_width = 900
screen_height = 450
screen = pygame.display.set_mode((screen_width, screen_height))

pygame.display.set_caption("In the Wilderness")

# Load animation frames:
frame_0 = pygame.image.load("assets/jump1.PNG")
frame_1 = pygame.image.load("assets/jump2.PNG")
frame_2 = pygame.image.load("assets/jump3.PNG")
frame_3 = pygame.image.load("assets/jump4.PNG")
frame_4 = pygame.image.load("assets/jump5.PNG")
frame_5 = pygame.image.load("assets/jump6.PNG")
frame_6 = pygame.image.load("assets/walk1.PNG")
frame_7 = pygame.image.load("assets/walk2.PNG")
frame_8 = pygame.image.load("assets/walk3.PNG")
frame_9 = pygame.image.load("assets/walk4.PNG")
frame_10 = pygame.image.load("assets/walk5.PNG")
frame_11 = pygame.image.load("assets/walk6.PNG")

fg = pygame.image.load("foreground_transparent.png").convert_alpha()

bg = pygame.image.load("nightforestbg.jpg").convert()
bg_width = bg.get_width()

tiles = math.ceil(screen_width / bg_width) + 1

floof = pygame.image.load("assets/idle1.png").convert_alpha()

obst1 = pygame.image.load("obstacles/bush1.png").convert_alpha()
obst2 = pygame.image.load("obstacles/bush2.png").convert_alpha()
obst3 = pygame.image.load("obstacles/bush3.png").convert_alpha()
obst4 = pygame.image.load("obstacles/bush4.png").convert_alpha()

advanced_width = int(obst1.get_width() * 0.4)
advanced_height = int(obst1.get_height() * 0.4)
obst1 = pygame.transform.scale(obst1, (advanced_width, advanced_height))
obst2 = pygame.transform.scale(obst2, (advanced_width, advanced_height))
obst3 = pygame.transform.scale(obst3, (advanced_width, advanced_height))
obst4 = pygame.transform.scale(obst4, (advanced_width, advanced_height))

new_width = int(floof.get_width() * 0.1)  
new_height = int(floof.get_height() * 0.1)  
floof = pygame.transform.scale(floof, (new_width, new_height))

new_w2 = int(frame_0.get_width() * 0.2)
new_h2 = int(frame_0.get_height() * 0.2)
frame_0 = pygame.transform.scale(frame_0, (new_w2, new_h2))
frame_1 = pygame.transform.scale(frame_1, (new_w2, new_h2))
frame_2 = pygame.transform.scale(frame_2, (new_w2, new_h2))
frame_3 = pygame.transform.scale(frame_3, (new_w2, new_h2))
frame_4 = pygame.transform.scale(frame_4, (new_w2, new_h2))
frame_5 = pygame.transform.scale(frame_5, (new_w2, new_h2))

new_width2 = int(frame_6.get_width() * 0.1)
new_height2 = int(frame_6.get_height() * 0.1)

frame_6 = pygame.transform.scale(frame_6, (new_width2, new_height2))
frame_7 = pygame.transform.scale(frame_7, (new_width2, new_height2))
frame_8 = pygame.transform.scale(frame_8, (new_width2, new_height2))
frame_9 = pygame.transform.scale(frame_9, (new_width2, new_height2))
frame_10 = pygame.transform.scale(frame_10, (new_width2, new_height2))
frame_11 = pygame.transform.scale(frame_11, (new_width2, new_height2))

jump_frames = [frame_0, frame_1, frame_2, frame_3, frame_4, frame_5]
walk_frames = [frame_6, frame_7, frame_8, frame_9, frame_10, frame_11]

floof_rect = jump_frames[0].get_rect()
floof_rect.x = 170
floof_rect.y = 400

frame_rate = 10
frame_index = 0
last_update = time.time()

obstacles = []

def generate_obstacle(last_x):
    x_position = last_x + 500 
    y_position = 200  
    obstacle_type = random.choice([obst1, obst2, obst3, obst4])  
    return [x_position, y_position, obstacle_type]

last_x = 0  
for i in range(3): 
    obstacles.append(generate_obstacle(last_x))
    last_x = obstacles[-1][0] 

running = True
is_jumping = False

while running:
    clock.tick(FPS)

    for i in range(0, tiles):
        screen.blit(bg, (i * bg_width + scroll, 0))

    scroll -= 5

    if abs(scroll) > bg_width:
        scroll = 0

    screen.blit(fg, (0, 0))

    for obstacle in obstacles:
        x_pos, y_pos, obstacle_type = obstacle
        x_pos -= obstacle_speed
        if x_pos < -obstacle_type.get_width():
            x_pos = last_x + 500  
            last_x = x_pos  
        obstacle[0] = x_pos
        screen.blit(obstacle_type, (x_pos, y_pos)) 

    if is_jumping:
        current_frame = jump_frames[frame_index]
    else:
        current_frame = walk_frames[frame_index]

    screen.blit(current_frame, (player_x, player_y))

    # Event handling for jumping:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not is_jumping:
                is_jumping = True 
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:
                is_jumping = False

    current_time = time.time()
    if current_time - last_update >= 1 / frame_rate:
        frame_index = (frame_index + 1) % len(jump_frames if is_jumping else walk_frames)
        last_update = current_time

    if is_jumping:
        player_y -= 15  
        if player_y <= 150:  
            y_change = 1
        if player_y >= 400:  # Adjust the y to stop at walking level
            is_jumping = False
            player_y = 400

    pygame.display.update()              

pygame.quit()

